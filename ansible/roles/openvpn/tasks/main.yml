---

- name: Install openvpn packages
  ansible.builtin.package:
    name: "{{ openvpn_packages }}"
    state: present
    update_cache: true

- name: server | Ensure /etc/openvpn/easy-rsa exists
  ansible.builtin.file:
    path: /etc/openvpn/easy-rsa
    state: directory
    mode: "0755"

- name: server | Easyrsa init-pki
  ansible.builtin.command:
    cmd: "{{ openvpn_easyrsa_path }}/easyrsa init-pki"
    chdir: /etc/openvpn/easy-rsa
    creates: /etc/openvpn/easy-rsa/pki

- name: server | Easyrsa build-ca
  ansible.builtin.command:
    cmd: "{{ openvpn_easyrsa_path }}/easyrsa build-ca nopass"
    chdir: /etc/openvpn/easy-rsa
    creates: /etc/openvpn/easy-rsa/pki/ca.crt
  environment:
    EASYRSA_BATCH: "yes"

- name: server | Easyrsa gen-dh
  ansible.builtin.command:
    cmd: "{{ openvpn_easyrsa_path }}/easyrsa gen-dh"
    chdir: /etc/openvpn/easy-rsa
    creates: /etc/openvpn/easy-rsa/pki/dh.pem

- name: server | Easyrsa build-server-full server nopass
  ansible.builtin.command:
    cmd: "{{ openvpn_easyrsa_path }}/easyrsa build-server-full server nopass"
    chdir: /etc/openvpn/easy-rsa
    creates: /etc/openvpn/easy-rsa/pki/issued/server.crt
  environment:
    EASYRSA_BATCH: "yes"

- name: server | Easyrsa build-client-full client nopass
  ansible.builtin.command:
    cmd: "{{ openvpn_easyrsa_path }}/easyrsa build-client-full client nopass"
    chdir: /etc/openvpn/easy-rsa
    creates: /etc/openvpn/easy-rsa/pki/issued/client.crt
  environment:
    EASYRSA_BATCH: "yes"

- name: server | Easyrsa gen-crl
  ansible.builtin.command:
    cmd: "{{ openvpn_easyrsa_path }}/easyrsa gen-crl"
    chdir: /etc/openvpn/easy-rsa
    creates: /etc/openvpn/easy-rsa/pki/crl.pem

- name: server | Openvpn --genkey --secret /etc/openvpn/easy-rsa/pki/ta.key
  ansible.builtin.command:
    cmd: openvpn --genkey --secret /etc/openvpn/easy-rsa/pki/ta.key
    creates: /etc/openvpn/easy-rsa/pki/ta.key

- name: server | directory should exists
  ansible.builtin.file:
    path: /etc/openvpn/server
    state: directory
    mode: "0755"

- name: server | Copy files to /etc/openvpn/server
  ansible.builtin.copy:
    src: /etc/openvpn/easy-rsa/pki/{{ item }}
    dest: /etc/openvpn/server/{{ item | basename }}
    mode: "0640"
    remote_src: yes
  loop:
    - ca.crt
    - dh.pem
    - ta.key
    - issued/client.crt
    - issued/server.crt
    - private/ca.key
    - private/client.key
    - private/server.key

- name: server | Copy files to /etc/openvpn
  ansible.builtin.copy:
    src: /etc/openvpn/easy-rsa/pki/{{ item }}
    dest: /etc/openvpn/{{ item | basename }}
    mode: "0640"
    remote_src: yes
  loop:
    - ca.crt
    - ta.key

- name: server | Place server.conf
  ansible.builtin.template:
    src: server.conf.j2
    dest: "{{ openvpn_configuration_directory }}/server.conf"
    owner: root
    group: "{{ openvpn_group }}"
    mode: "0640"

- name: Start and enable openvpn
  ansible.builtin.service:
    name: "{{ openvpn_service }}"
    state: started
    enabled: yes

- name: Generate client config
  ansible.builtin.template:
    src: client.conf.j2
    dest: "{{ openvpn_configuration_directory }}/client.conf"
    owner: root
    group: "{{ openvpn_group }}"
    mode: "0640"

- name: Copy certificates and keys from the server to the client
  ansible.builtin.fetch:
    src: /etc/openvpn/easy-rsa/pki/{{ item }}
    dest: "{{ openvpn_client_local_path }}/{{ item | basename }}"
    mode: "0640"
    flat: yes
  loop:
    - ca.crt
    - issued/client.crt
    - private/client.key
    - ta.key

- name: Copy generated conf to the local client path
  ansible.builtin.fetch:
    src: "{{ openvpn_configuration_directory }}/client.conf"
    dest: "{{ openvpn_client_local_path }}/client.conf"
    flat: yes

- name: Start ufw service
  service:
    name: ufw
    enabled: true
    state: started

- name: Enable ufw
  community.general.ufw:
    direction: incoming
    state: enabled
    policy: allow

- name: Enable forwarding - ufw
  lineinfile:
    dest: /etc/default/ufw
    regexp: "^DEFAULT_FORWARD_POLICY="
    line: DEFAULT_FORWARD_POLICY="ACCEPT"

- name: Allow incoming VPN connections - ufw
  community.general.ufw:
    direction: in
    proto: "{{ openvpn_proto }}"
    to_port: "{{ openvpn_port | string }}"
    rule: allow

- name: Accept packets from VPN tunnel adaptor - ufw
  community.general.ufw:
    direction: in
    interface: tun0
    rule: allow

- name: Setup nat table rules with MASQUERADE - ufw
  blockinfile:
    dest: /etc/ufw/before.rules
    state: present
    insertbefore: \*filter
    block: |
      # OpenVPN config
      *nat
      :POSTROUTING ACCEPT [0:0]
      -A POSTROUTING -s {{ openvpn_server_network }}/24 -j MASQUERADE
      COMMIT
  notify:
    - restart ufw
